{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Introduction to PowerDI","text":"<p>PowerDI is simple yet powerful dependency injection based framework for PHP. It is designed to be easy to use and to provide a lot of features out of the box. It is designed to be used in any PHP project, from small to large, from simple to complex.</p>"},{"location":"getting-started/","title":"Getting Started","text":"<p>This is a guide to help you get started with PowerDI, implementing your first project.</p>"},{"location":"getting-started/#installation","title":"Installation","text":""},{"location":"getting-started/#create-a-new-project","title":"Create a new project","text":"<pre><code>powerdi new project my-project\n</code></pre> <p>This command will create a new project with the name <code>my-project</code>, it will contain the basic structure of a PowerDI project.</p>"},{"location":"getting-started/#project-structure","title":"Project Structure","text":"<pre><code>my-project\n\u251c\u2500\u2500 src\n\u2502   \u251c\u2500\u2500 Controllers\n\u2502   \u2502   \u251c\u2500\u2500 MainController.php\n\u2502   \u2502   \u2514\u2500\u2500 ErrorController.php\n\u2502   \u251c\u2500\u2500 Services\n\u2502   \u2502   \u2514\u2500\u2500 MainService.php\n\u2502   \u2514\u2500\u2500 Kernel.php\n\u251c\u2500\u2500 config\n\u2502   \u251c\u2500\u2500 .env\n\u2502   \u251c\u2500\u2500 config.yaml // Main configuration file\n\u2502   \u251c\u2500\u2500 dependency.yaml // Dependency injection configuration\n\u2502   \u251c\u2500\u2500 firewall.yaml // Firewall configuration\n\u2502   \u2514\u2500\u2500 routes.yaml // Routes configuration\n\u251c\u2500\u2500 public\n\u2502   \u251c\u2500\u2500 index.php\n\u2502   \u251c\u2500\u2500 .htaccess\n\u2502   \u2514\u2500\u2500 assets\n\u251c\u2500\u2500 templates\n\u2502   \u2514\u2500\u2500 index.latte\n\u251c\u2500\u2500 composer.json\n\u2514\u2500\u2500 .gitignore\n</code></pre>"},{"location":"getting-started/#configuration","title":"Configuration","text":""},{"location":"getting-started/#main-configuration","title":"Main Configuration","text":"<p>The main configuration file is located in <code>config/config.yaml</code>, it contains the main configuration of the project.</p> <pre><code>app:\n  name: My Project\n  version: 1.0.0\n  debug: true\n  timezone: UTC\n  locale: en\n  lookup:\n    prefix: src/\n    paths: # Look to note 1.\n      - Controllers\n      - Services\n      - Repositories\n      - Entities\n    templates:\n      path: templates/\n      temp: tmp/\n  errors:\n    name: \"ErrorController\"\n    method: handleError\n  cache:\n    service: \"CacheService\"\n</code></pre> <p>Note 1: The <code>paths</code> key is used to define the directories where the <code>Kernel</code> will look for the classes. The correct setup is necessary for DI to work properly. Classes with the DI annotations outside these directories will not be found.</p>"},{"location":"getting-started/#dependency-injection-configuration","title":"Dependency Injection Configuration","text":"<p>The dependency injection configuration file is located in <code>config/dependency.yaml</code>, it contains the configuration of the services and prope</p> <pre><code>parameters: # The injectable properties\n  db:\n    default:\n      dsn: \"mysql:host={DB_HOST};dbname={DB_NAME}\"\n      user: \"{DB_USER}\"\n      password: \"{DB_PASS}\"\nservices:\n  MySQLConnector: # Name of the service\n    class: PowerDI\\Database\\MySQLConnector\n    arguments: [ \"%db.default.dsn%\", \"%db.default.username%\", \"%db.default.password%\" ]\n  EntityManager:\n    class: PowerDI\\Database\\EntityManager\n    arguments: [ \"@MySQLConnector\" ]\n    instantiate: \"always\" # Instantiate the service always\n</code></pre>"},{"location":"getting-started/#firewall-configuration","title":"Firewall Configuration","text":"<p>The firewall configuration file is located in <code>config/firewall.yaml</code>, it contains the configuration of the security of the project.</p> <pre><code>firewall:\n  status: on\n  user:\n    binder: \"@MyUserBinder\" # The service that will bind the user\n  routes:\n    admin:\n      path: /admin/**\n      authenticated: true\n    default:\n      default: true\n      permitAll: true\n</code></pre>"},{"location":"getting-started/#routes-configuration","title":"Routes Configuration","text":"<p>The routes configuration file is located in <code>config/routes.yaml</code>, it contains the configuration of the routes of the project.</p> <p>The route configuration is not yet implemented, but it will be soon.</p>"},{"location":"getting-started/#running-the-project","title":"Running the project","text":""},{"location":"getting-started/#development","title":"Development","text":"<p>You can either use the PHP built-in server, or use a local server like Apache or Nginx.</p> <pre><code>php -S localhost:8000 -t public\n</code></pre>"},{"location":"getting-started/#production","title":"Production","text":"<p>Make sure to configure your server to point to the <code>public</code> directory.</p> <p>The <code>.htaccess</code> file is already configured to redirect all requests to the <code>index.php</code> file.</p>"},{"location":"getting-started/#whats-next","title":"What's next?","text":"<ul> <li>Controllers</li> <li>Injection</li> <li>Database</li> <li>Security</li> <li>Cache</li> <li>Help us improve</li> </ul>"},{"location":"installation/","title":"The CLI tool installation","text":"<p>To install the CLI tool, you can use the following command:</p>"},{"location":"features/Cache/","title":"How to use the Cache feature","text":"<p>The Cache feature is a powerful tool that allows you to store the rendered output of a page in a in-memory cache. This can be useful for pages that are expensive to render, or for pages that are accessed frequently.</p> <p>As of now, the Cache feature only supports Memcached.</p>"},{"location":"features/Cache/#enabling-the-cache-feature","title":"Enabling the Cache feature","text":"<p>Define the CacheService in your <code>dependency.yaml</code> file:</p> <pre><code>properties:\n  cache:\n    servers:\n      - host: \"{CACHE_HOST}\"\n        port: \"{CACHE_PORT}\"\nservices:\n  CacheService:\n    class: PowerDI\\Cache\\MemcachedService\n    arguments: [ \"%cache%\" ]\n</code></pre> <p>Then tell PowerDI to use the Cache feature in your <code>config.yaml</code> file:</p> <pre><code>app:\n  cache:\n    service: \"CacheService\" # The name of the CacheService defined in dependency.yaml\n</code></pre>"},{"location":"features/Cache/#using-the-cache-feature","title":"Using the Cache feature","text":"<p>To cache a specific route, add the <code>cacheConfig</code> property to the <code>#Route</code> annotation of the route you want to cache:</p> <pre><code>&lt;?php\n\nnamespace App\\Controllers;\n\nuse PowerDI\\Core\\Autowired;\nuse PowerDI\\Core\\CacheType;\nuse PowerDI\\Core\\Controller;\nuse PowerDI\\Core\\Route;\n\n#[Controller]\nclass MainController extends AbstractController {\n    #[Route(path: \"/\", cacheConfig: [\"type\" =&gt; CacheType::ManuallyCacheable, \"ttl\" =&gt; 60, \"key\" =&gt; \"home_page\"])]\n    public function index(): HttpResponse {\n        return $this-&gt;render(\"home.latte\");\n    }\n\n    #[Route(path: \"/contacts\", cacheConfig: [\"type\" =&gt; CacheType::AutoCacheable, \"ttl\" =&gt; 60])]\n    public function contacts(): HttpResponse {\n        return $this-&gt;render(\"contacts.latte\");\n    }\n\n    #[Route(path: \"/uncacheable\", cacheConfig: [\"type\" =&gt; CacheType::Uncacheable])]\n    public function uncacheable(): HttpResponse {\n        return $this-&gt;render(\"uncacheable.latte\");\n    }\n}\n</code></pre>"},{"location":"features/Cache/#cachetype","title":"CacheType","text":"<p>There are three types of cache:</p> <ul> <li>AutoCacheable: The page will be cached without a need to configure anything else.</li> <li>ManuallyCacheable: The page will be cached, but you need to specify the cache key, which you can then use to   invalidate or interact with the cache.</li> <li>Uncacheable: The page will not be cached.</li> </ul>"},{"location":"features/Controllers/","title":"How to define a controller","text":"<p>Controllers are the classes that handle the requests and responses of the application. They are the entry point of the application and are responsible for processing the requests and returning the responses.</p>"},{"location":"features/Controllers/#routes","title":"Routes","text":"<p>The routes are the paths that the application will respond to.</p> <p>The only way to define a route by now is to use the <code>#[Route]</code> annotation.</p>"},{"location":"features/Controllers/#creating-a-controller","title":"Creating a Controller","text":"<p>To create a controller, you need to create a class that extends the <code>PowerDI\\HttpBasics\\AbstractController</code> class.</p> <pre><code>&lt;?php\n\nnamespace App\\Controller;\n\nuse PowerDI\\Core\\Controller;\nuse PowerDI\\Core\\Route;\nuse PowerDI\\HttpBasics\\AbstractController;\nuse PowerDI\\HttpBasics\\HttpMethod;\nuse PowerDI\\HttpBasics\\HttpResponse;\nuse PowerDI\\HttpBasics\\HttpRequest;\n\n#[Controller]\nclass MyController extends AbstractController {\n    #[Route(\"/\", methods: [HttpMethod::GET])]\n    public function index(HttpRequest $request) : HttpResponse {\n        return $this-&gt;render(\"index.latte\", [\"title\" =&gt; \"Hello, World!\"]);\n        //return $this-&gt;redirect(\"/home\");\n        //return $this-&gt;responseWithJson([\"message\" =&gt; \"Hello, World!\"]);\n        //throw new \\Exception(\"An error occurred\");\n    }\n}\n</code></pre> <p>The array passed to the <code>render</code> method is the data that will be passed to the template.</p>"},{"location":"features/Controllers/#error-handling","title":"Error Handling","text":"<p>There is a global exception handler that will catch all exceptions thrown by the application.</p> <p>When an exception is thrown, the application will call the <code>handleException</code> method defined in the ErrorController, that has to be configured in the <code>config.yaml</code> file.</p>"},{"location":"features/Database/","title":"How to use database in PowerDI","text":""},{"location":"features/Database/#understanding-the-databases-in-powerdi","title":"Understanding the databases in PowerDI","text":"<p>The database API in PowerDI is similar to Spring Data JPA.</p>"},{"location":"features/Database/#entities","title":"Entities","text":"<p>Entities are the classes that represent the tables in the database. They are annotated with the <code>@Entity</code> annotation.</p> <pre><code>&lt;?php\n\nnamespace App\\Entities;\n\nuse PowerDI\\Database\\Entity;\nuse PowerDI\\Database\\SQL\\Table;\n\n#[Entity] // This annotation is used to define that this class is an entity\n#[Table(\"users\")] // This annotation is used to define the table name\nclass User implements \\JsonSerializable {\n    #[ID] // This annotation is used to define the primary key\n    private ?int $id;\n    private ?string $email;\n    private ?string $password;\n    private ?string $fullname;\n\n    /**\n     * @param ?string $email\n     * @param ?string $password\n     * @param ?string $fullname\n     */\n    public function __construct(?string $email = null, ?string $password = null, ?string $fullname = null) {\n        $this-&gt;id = null;\n        $this-&gt;email = $email;\n        $this-&gt;password = $password;\n        $this-&gt;fullname = $fullname;\n    }\n\n    public function getId(): ?int {\n        return $this-&gt;id;\n    }\n\n    public function getEmail(): string {\n        return $this-&gt;email;\n    }\n\n    public function getPassword(): string {\n        return $this-&gt;password;\n    }\n\n    public function getFullname(): string {\n        return $this-&gt;fullname;\n    }\n\n    /**\n     * @param string|null $password\n     */\n    public function setPassword(?string $password): void {\n        $this-&gt;password = $password;\n    }\n}\n</code></pre>"},{"location":"features/Database/#repositories","title":"Repositories","text":"<p>Repositories are the classes that interact with the database. They are annotated with the <code>@Repository</code> annotation.</p> <p>Note that there are multiple types of repositories in PowerDI, the most common one is the <code>SqlRepository</code>.</p> <pre><code>&lt;?php\n\nnamespace App\\Repositories;\n\nuse App\\Entities\\User;\nuse PowerDI\\Database\\DatabaseException;\nuse PowerDI\\Database\\Repository;\nuse PowerDI\\Database\\SQL\\Query\\SQLQueryBuilder;\nuse PowerDI\\Database\\SQL\\Query\\WhereOperators;\nuse PowerDI\\Database\\SQL\\SqlRepository;\n\n#[Repository(User::class)] // This annotation is used to define that this class is a repository and the entity it manages\nclass UserRepository extends SqlRepository {\n    public function getUsers(): array {\n        return $this-&gt;findAll();\n    }\n\n    /**\n     * @throws DatabaseException\n     */\n    public function getUserByEmail(string $email): ?User {\n        $query = (new SQLQueryBuilder( $this-&gt;class))-&gt;select([\"*\"])-&gt;where(\"email\", WhereOperators::Equal, $email)-&gt;build();\n        return $this-&gt;get($query-&gt;query, $query-&gt;arguments);\n    }\n\n    public function getUserById(int $id): ?User {\n        return $this-&gt;find($id);\n    }\n}\n</code></pre>"},{"location":"features/Database/#using-the-database","title":"Using the database","text":""},{"location":"features/Database/#connecting-to-the-database","title":"Connecting to the database","text":"<p>To connect to the database, you need to define the <code>Connector</code> (specific to the database you are using) and the <code>EntityManager</code>.</p> <p>The <code>Connector</code> is used to connect to the database and execute queries. The <code>EntityManager</code> is used to manage the entities and repositories.</p> <pre><code>parameters: # The injectable properties\n  db:\n    default:\n      dsn: \"mysql:host={DB_HOST};dbname={DB_NAME}\" # {VARIABLE} will be replaced by the environment variable specified in the .env file\n      user: \"{DB_USER}\"\n      password: \"{DB_PASS}\"\nservices:\n  MySQLConnector: # Name of the service\n    class: PowerDI\\Database\\MySQLConnector\n    arguments: [ \"%db.default.dsn%\", \"%db.default.username%\", \"%db.default.password%\" ]\n  EntityManager:\n    class: PowerDI\\Database\\EntityManager\n    arguments: [ \"@MySQLConnector\" ]\n    instantiate: \"always\" # Instantiate the service always\n</code></pre>"},{"location":"features/Database/#using-the-repositories","title":"Using the repositories","text":"<p>To use the repositories, you need to inject them into the classes where you want to use them.</p> <pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse App\\Entities\\User;\nuse App\\Repositories\\UserRepository;\nuse PowerDI\\Core\\Autowired;\n\nclass UserService {\n    #[Autowired(\"@UserRepository\")] // This annotation is used to inject the UserRepository\n    private UserRepository $userRepository;\n\n    public function getUserByEmail(string $email): ?User {\n        return $this-&gt;userRepository-&gt;getUserByEmail($email);\n    }\n}\n</code></pre>"},{"location":"features/Injection/","title":"How does the dependency injection work?","text":"<p>The dependency injection allows you to define services and parameters, that can be injected into class variables or the constructor.</p> <p>The dependency injection in PowerDI has a central container that stores the services and parameters. </p>"},{"location":"features/Injection/#how-to-define-and-inject-a-service-and-a-parameter","title":"How to define and inject a service and a parameter?","text":""},{"location":"features/Injection/#in-the-dependencyyaml-file","title":"In the <code>dependency.yaml</code> file","text":"<pre><code>parameters:\n  my_parameter: \"value\" # The parameter to inject\n\nservices:\n  MyService: # The name of the service\n    class: MyNamespace\\MyService # The class of the service\n    arguments: [ \"%my_parameter%\" ] # The arguments to pass to the constructor\n</code></pre>"},{"location":"features/Injection/#using-annotations","title":"Using annotations","text":"<pre><code>&lt;?php\n\nnamespace MyNamespace;\n\nuse PowerDI\\Core\\Service;\nuse PowerDI\\Core\\Autowired;\n\nclass MyService {\n    public function __construct(private string $parameter) {}\n}\n\n#[Service]\nclass MyAnnotatedService {\n    #[Autowired(\"%my_parameter%\")] // To inject a parameter, we use the %% notation\n    private string $parameter;\n\n    #[Autowired(\"@MyService\")] // To inject a service, we use the @ notation\n    private MyService $myService;\n}\n</code></pre>"},{"location":"features/Security/","title":"How to secure your application?","text":"<p>The PowerDI framework provides a simple way to secure your application using the firewall configuration.</p>"},{"location":"features/Security/#the-internal-user-representation","title":"The internal user representation","text":"<p>The user is represented by the <code>PowerDI\\Security\\Principal</code> class, which contains the user's id, roles and other user specific data.</p>"},{"location":"features/Security/#how-to-bind-the-user","title":"How to bind the user?","text":"<p>The binding is a process of binding a request to a user. The binding is done by a service that implements the <code>PowerDI\\Security\\UserDataBinder</code> interface.</p>"},{"location":"features/Security/#a-simple-session-based-user-binder","title":"A simple session-based user binder","text":"<p>This binder is actually a part of the framework itself, but it might be an inspiration for your own implementation.</p> <p>You might also want to take a look at the <code>PowerDI\\Security\\JwtUserBinder</code> class.</p> <pre><code>&lt;?php\nnamespace App\\Services;\n\nuse PowerDI\\Core\\Autowired;\nuse PowerDI\\Core\\Service;\nuse PowerDI\\Core\\SessionContext;\nuse PowerDI\\Security\\Principal;\nuse PowerDI\\Security\\UserDataBinder;\n\n#[Service]\nclass SessionUserBinder implements UserDataBinder {\n\n    #[Autowired(\"@SessionContext\")]\n    private SessionContext $sessionContext;\n    public function getUser(): ?Principal {\n        if($this-&gt;sessionContext-&gt;get(\"USER_ID\") !== null) {\n            return unserialize($this-&gt;sessionContext-&gt;get(\"USER_PRINCIPAL\"));\n        }\n\n        return null;\n    }\n\n    public function setUser(Principal $user) {\n        $this-&gt;sessionContext-&gt;put(\"USER_ID\", serialize($user));\n        $this-&gt;sessionContext-&gt;put(\"USER_PRINCIPAL\", serialize($user));\n    }\n\n    public function destroy() {\n        $this-&gt;sessionContext-&gt;destroy();\n    }\n}\n</code></pre>"},{"location":"features/Security/#using-the-binder","title":"Using the binder","text":"<p>You can use the binder in any of your services by injecting it.</p> <pre><code>&lt;?php\n\nnamespace App\\Services;\n\nuse PowerDI\\Core\\Autowired;\nuse PowerDI\\Core\\Service;\nuse PowerDI\\Security\\Principal;\nuse App\\Services\\MySessionUserBinder;\n\n#[Service]\nclass MyAuthService {\n\n    #[Autowired(\"@MySessionUserBinder\")]\n    private MySessionUserBinder $userBinder;\n\n    public function login($username, $password) {\n        $this-&gt;userBinder-&gt;setUser(new Principal($username, [\"admin\"]));\n    }\n\n    public function logout() {\n        $this-&gt;userBinder-&gt;destroy();\n    }\n}\n</code></pre>"},{"location":"features/Security/#firewall-configuration","title":"Firewall Configuration","text":"<p>The firewall configuration file is located in <code>config/firewall.yaml</code>.</p> <pre><code>firewall:\n  status: on\n  user:\n    binder: \"@SessionUserBinder\"\n  routes:\n    admin:\n      path: /admin/**\n      hasRole: \"admin\"\n    internal:\n      path: /internal/**\n      hasAnyRole: [ \"admin\", \"user\" ]\n    methodGET:\n      path: /user\n      method: GET\n      permitAll: true\n    methodPOST:\n      path: /user\n      method: POST\n      authenticated: true\n    default:\n      default: true\n      permitAll: true\n</code></pre>"}]}